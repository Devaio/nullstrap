// Generated by CoffeeScript 1.6.2
(function() {
  var RedisStore, app, express, hbsPrecompiler, io, passport, port, server;

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  passport = require('passport');

  RedisStore = require('connect-redis')(express);

  hbsPrecompiler = require('handlebars-precompiler');

  app.configure(function() {
    var redis, rtg;

    app.set('views', __dirname + '/../views');
    app.set('view engine', 'jade');
    app.set('view options', {
      layout: false
    });
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use('/public', express["static"](__dirname + '/../public'));
    app.use('/components', express["static"](__dirname + '/../components'));
    app.use(express.methodOverride());
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    if (process.env.REDISTOGO_URL) {
      rtg = require('url').parse(process.env.REDISTOGO_URL);
      redis = require('redis').createClient(rtg.port, rtg.hostname);
      redis.auth(rtg.auth.split(':')[1]);
      app.use(express.session({
        secret: process.env.REDIS_SECRET || "super secret string",
        maxAge: new Date(Date.now() + 7200000),
        store: new RedisStore({
          client: redis
        })
      }));
    } else {
      app.use(express.session({
        secret: 'mysupersecret'
      }));
    }
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(app.router);
    if (!process.env.NODE_ENV) {
      return hbsPrecompiler.watchDir(__dirname + "/../public/templates/src", __dirname + "/../public/templates/templates.js", ['handlebars']);
    }
  });

  app.get('/', function(req, res) {
    return res.render('index');
  });

  io.sockets.on('connection', function(socket) {
    return socket.emit('hello', {
      data: 'Hi!'
    });
  });

  port = process.env.PORT || 3000;

  server.listen(port, function() {
    return console.log("Server running on port " + port);
  });

}).call(this);
